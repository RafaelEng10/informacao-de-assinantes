#include <stdio.h>
#include <string.h>
#define MAX 100

typedef struct{ 
    int cpf;
    char nome[50];
    int idade;
} pessoa; //definir que pessoa é variavel

pessoa pessoas[MAX]; 
int count = 0; 
int id; 

void leString(char stringLiga[], int max) //permite usar espaços em string
{
    int i = 0;
    char letra;
    
    for (i = 0; i < (max - 1); i++) {
        letra = fgetc(stdin);
        if ((letra == '\n') && (i == 0)) {
            i = i - 1;
            continue;
        };

        if (letra == '\n') break; 
        
        stringLiga[i] = letra;
    }

    stringLiga[i] = '\0';
}

int cpfJaCadastrado(int cpf, int ignorarIndice) {
    for (int i = 0; i < count; i++) {
        if (i != ignorarIndice && pessoas[i].cpf == cpf) {
            return 1;
        }
    }
    return 0;
}

void cadastrarPessoas(){ 
    if (count < MAX) 
    {
        printf("Digite o nome da pessoa: ");
        leString(pessoas[count].nome, 50);
        printf("\nDigite a idade da pessoa: ");
        scanf("%d", &pessoas[count].idade); 
        printf("\nDigite o CPF: ");
        scanf("%d", &pessoas[count].cpf); 
        if (cpfJaCadastrado(pessoas[count].cpf, -1)) {
            printf("\nCPF já cadastrado! Cadastro cancelado.\n");
            return;
        }
        printf("\n===================================================================================================");
        printf("\nCadastro concluido! Para realizar pesquisa ou edição de dados, digite o CPF da pessoa cadastrada.\n");
        printf("===================================================================================================\n");
        count++; 
    }
    
    else
        printf("\nLimite de cadastro atingido!");
        
}

void listarPessoas(){ 
    if(count != 0){
        printf("Pessoas cadastradas:\n");
        printf("\t NOME \t IDADE \t CPF \n");
        printf("=============================================================================================\n");
            for(int i = 0; i < count; i++){
                printf("\t %s \t %d \t %d \n", pessoas[i].nome, pessoas[i].idade, pessoas[i].cpf);
                printf("\n=============================================================================================\n");
            }
    }
    else
        printf("\nNenhuma pessoa cadastrada!\n");
}


int cpfBuscar(){
    printf("Digite o CPF da pessoa: ");    
    scanf("%d", &id);
    return id;
}

void buscarPessoas(){ 
    if(count != 0){ 
        cpfBuscar();
        for(int i = 0; i < count; i++){
            if(pessoas[i].cpf == id){
                printf("\t NOME \t IDADE \t CPF \n");
                printf("\t=============================================================================================\n");
                printf("\t %s \t %d \t %d \n", pessoas[i].nome, pessoas[i].idade, pessoas[i].cpf);
                return;
            }
        }
    }
    else{
        printf("\nNenhuma pessoa cadastrada!\n");
        return;
    }

    printf("\nPessoa não cadastrada\n");
}

void editarPessoas(){ 
    if(count != 0){
        cpfBuscar();
        for(int i = 0; i < count; i++){
            if(pessoas[i].cpf == id){
                printf("Digite os dados de %s novamente.\n", pessoas[i].nome);
                printf("Digite o nome da pessoa: ");
                leString(pessoas[i].nome, 50);
                printf("\nDigite a idade da pessoa: ");
                scanf("%d", &pessoas[i].idade); 
                printf("\nDigite o CPF: ");
                scanf("%d", &pessoas[i].cpf); 
                // VERIFICAÇÃO DE CPF DUPLICADO NA EDIÇÃO
                if (cpfJaCadastrado(pessoas[i].cpf, i)) {
                    printf("\nCPF já cadastrado para outra pessoa! Edição cancelada.\n");
                    return;
                }
                printf("\n===================================================================================================");
                printf("\nCadastro concluido! Para realizar pesquisa ou edição de dados, digite o CPF da pessoa cadastrada.\n");
                printf("===================================================================================================\n");
                return;
            }
        }
    }
    else{
        printf("\nNenhuma pessoa cadastrada!\n");
        return;
    }

    printf("\nPessoa não cadastrada\n");
}

void excluirPessoas(){ 
    char essc;
    if(count != 0){
        cpfBuscar();
        for(int i = 0; i < count; i++){
            if(pessoas[i].cpf == id){
                printf("Tem certeza que deseja deletar a pessoa %s? (S/N): ", pessoas[i].nome);
                scanf(" %c", &essc);
                switch(essc){
                    case 'S':
                    case 's':
                        for(int j = i; j < count - 1; j++){ 
                            pessoas[j] = pessoas[j + 1]; 
                        }
                        count--; 
                        printf("Pessoa deletada com sucesso!");
                        return;

                    case 'N':
                    case 'n':
                        return; 

                    default:
                        printf("Inválido");
                        break;
                }

            }
        }
    }
    else {
        printf("\nNenhuma pessoa cadastrada!\n");
        return;
    }

    printf("\nPessoa não cadastrada.\n");
}

int menu(){
    int opcao;
    do{
        printf("\nMenu:\n");
        printf("1. Cadastrar\n");
        printf("2. Listar\n");
        printf("3. Pesquisar\n");
        printf("4. Editar\n");
        printf("5. Excluir\n");
        printf("0. Sair\n");
        printf("Escolha uma opcao: ");
        scanf("%d", &opcao);
        return opcao;
    }while (opcao != 0);
    
}

int main()
{
    char esc;

    printf("Cadastro de Pessoas\n");
    while(1)
    {
        switch(menu()){
            case 0: 
                return 0; 

            case 1: 
                cadastrarPessoas();
                break;

            case 2:
                listarPessoas();
                break;

            case 3:
                buscarPessoas();
                break;

            case 4:
                editarPessoas();
                break;

            case 5:
                excluirPessoas();
                break;
            
            default:
                printf("Inválido, tente novamente!");
                break;
        }
    }
}

